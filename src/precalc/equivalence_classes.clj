(ns precalc.equivalence-classes)

(def dist
  ; Equivalence classes for (a > b > c > d > e)
  {:suits
  [[0 0 0 0 0] [0 0 1 2 2] [0 1 1 0 1] [0 1 2 1 0]
   [0 0 0 0 1] [0 0 1 2 3] [0 1 1 0 2] [0 1 2 1 1]
   [0 0 0 1 0] [0 1 0 0 0] [0 1 1 1 0] [0 1 2 1 2]
   [0 0 0 1 1] [0 1 0 0 1] [0 1 1 1 1] [0 1 2 1 3]
   [0 0 0 1 2] [0 1 0 0 2] [0 1 1 1 2] [0 1 2 2 0]
   [0 0 1 0 0] [0 1 0 1 0] [0 1 1 2 0] [0 1 2 2 1]
   [0 0 1 0 1] [0 1 0 1 1] [0 1 1 2 1] [0 1 2 2 2]
   [0 0 1 0 2] [0 1 0 1 2] [0 1 1 2 2] [0 1 2 2 3]
   [0 0 1 1 0] [0 1 0 2 0] [0 1 1 2 3] [0 1 2 3 0]
   [0 0 1 1 1] [0 1 0 2 1] [0 1 2 0 0] [0 1 2 3 1]
   [0 0 1 1 2] [0 1 0 2 2] [0 1 2 0 1] [0 1 2 3 2]
   [0 0 1 2 0] [0 1 0 2 3] [0 1 2 0 2] [0 1 2 3 3]
   [0 0 1 2 1] [0 1 1 0 0] [0 1 2 0 3]]
   :times
   [4  24 12 24
    12 24 24 24
    12 12 12 24
    12 12 12 24
    24 24 24 24
    12 12 24 24
    12 12 24 24
    24 24 24 24
    12 24 24 24
    12 24 24 24
    24 24 24 24
    24 24 24 24
    24 12 24]})

(def pair
  ; Equivalence classes for (a, a, b > c > d)
  {:suits
  [[0 1 0 0 0] [0 1 0 1 2] [0 1 2 0 0] [0 1 2 2 2]
   [0 1 0 0 1] [0 1 0 2 0] [0 1 2 0 1] [0 1 2 2 3]
   [0 1 0 0 2] [0 1 0 2 1] [0 1 2 0 2] [0 1 2 3 0]
   [0 1 0 1 0] [0 1 0 2 2] [0 1 2 0 3] [0 1 2 3 2]
   [0 1 0 1 1] [0 1 0 2 3] [0 1 2 2 0] [0 1 2 3 3]]
   :times
   [12 24 24 12
    12 24 24 12
    24 24 24 24
    12 24 24 12
    12 24 24 12]})

(def dpair
  ; Equivalence classes for (a, a > b, b, c)
  {:suits
  [[0 1 0 1 0] [0 1 0 2 0] [0 1 0 2 2] [0 1 2 3 0]  
   [0 1 0 1 2] [0 1 0 2 1] [0 1 0 2 3] [0 1 2 3 2]]
   :times
   [12 24 24 12
    12 24 24 12]})

(def trio
  ; Equivalence classes for (a, a, a, b > c)
  {:suits
  [[0 1 2 0 0] [0 1 2 0 3] [0 1 2 3 3]
   [0 1 2 0 1] [0 1 2 3 0]]
   :times
   [12 12 4
    24 12]})

(def full
  ; Equivalence classes for (a, a, a, b, b)
  {:suits
  [[0 1 2 0 1] [0 1 2 0 3]]
   :times
   [12 12]})

(def four
  ; Equivalence classes for (a, a, a, a, b)
  {:suits
  [[0 1 2 3 0]]
   :times
   [4]})
